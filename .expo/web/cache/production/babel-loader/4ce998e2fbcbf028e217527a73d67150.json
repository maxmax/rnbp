{"ast":null,"code":"function parseJSON(response){if(response.status===204||response.status===205){return null;}return response.json();}function checkStatus(response){if(response.status>=200&&response.status<300){return response;}var error=new Error(response.statusText);error.response=response;throw error;}export default function request(url,options){var requestUrl=\"http://api.appssaga.com\"+url;return fetch(requestUrl,options).then(checkStatus).then(parseJSON);}","map":{"version":3,"sources":["/Users/maxkv/Apps/rnbp/services/request.js"],"names":["parseJSON","response","status","json","checkStatus","error","Error","statusText","request","url","options","requestUrl","fetch","then"],"mappings":"AAUA,QAASA,CAAAA,SAAT,CAAmBC,QAAnB,CAA6B,CAC3B,GAAIA,QAAQ,CAACC,MAAT,GAAoB,GAApB,EAA2BD,QAAQ,CAACC,MAAT,GAAoB,GAAnD,CAAwD,CACtD,MAAO,KAAP,CACD,CACD,MAAOD,CAAAA,QAAQ,CAACE,IAAT,EAAP,CACD,CASD,QAASC,CAAAA,WAAT,CAAqBH,QAArB,CAA+B,CAC7B,GAAIA,QAAQ,CAACC,MAAT,EAAmB,GAAnB,EAA0BD,QAAQ,CAACC,MAAT,CAAkB,GAAhD,CAAqD,CACnD,MAAOD,CAAAA,QAAP,CACD,CAED,GAAMI,CAAAA,KAAK,CAAG,GAAIC,CAAAA,KAAJ,CAAUL,QAAQ,CAACM,UAAnB,CAAd,CACAF,KAAK,CAACJ,QAAN,CAAiBA,QAAjB,CACA,KAAMI,CAAAA,KAAN,CACD,CAUD,cAAe,SAASG,CAAAA,OAAT,CAAiBC,GAAjB,CAAsBC,OAAtB,CAA+B,CAC5C,GAAMC,CAAAA,UAAU,2BAAiBF,GAAjC,CAEA,MAAOG,CAAAA,KAAK,CAACD,UAAD,CAAaD,OAAb,CAAL,CACJG,IADI,CACCT,WADD,EAEJS,IAFI,CAECb,SAFD,CAAP,CAGD","sourcesContent":["import { API_ROOT } from 'react-native-dotenv';\n// const API_ROOT = process.env.API_ROOT;\n\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  const requestUrl = `${API_ROOT}${url}`;\n\n  return fetch(requestUrl, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}\n"]},"metadata":{},"sourceType":"module"}